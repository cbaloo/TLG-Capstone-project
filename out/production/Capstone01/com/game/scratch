//            Lobby lobby=new Lobby();
//            //Update location of the player with current room
//            player.getStatus().put("Location",lobby.getName().value());
//            //Display roomMessage as you enter the room
//            displayRoomMessage(lobby);
//            //Display player status: location and score
//            System.out.println("\nSTATUS: "+player.getStatus());
//            //Display action options
//            System.out.println("ACTIONS: "+lobby.getActions());

//            while(true){
//                //Player response after reading the status and action options
//                String action=console.readLine("\nType action:");
//                //Only entrance to RommJava is allowed at this point, all the other rooms are closed
//                if(action.toUpperCase().equals("enter java".toUpperCase())){
//                    RoomJava roomJava=new RoomJava();
//                    player.getStatus().put("Location",roomJava.getName().value());
//                    displayRoomMessage(roomJava);
//                    System.out.println("\nSTATUS: "+player.getStatus());
//                    System.out.println("ACTIONS: "+roomJava.getActions());
//                    while(true) {
//                        action=console.readLine("\nType action:");
//                        if(action.toUpperCase().equals("TAKE JAVA QUIZ")){
//                            for(String question:roomJava.getQuiz().keySet()){
//                                String answer=console.readLine(question+": ");
//                                if(answer.equals(roomJava.getQuiz().get(question))){
//                                    System.out.println("Correct!!!");
//                                }
//                                else{
//                                    System.out.println("Nope!!!");
//                                }
//                            }
//                        }
//                        else{
//                            System.out.println("Should have picked java quiz");
//                        }
//                        break;
//                    }
//                    break;
//                }
//                else if(action.isEmpty()){
//                    System.out.println("Invalid Entry!");
//                }
//                else if (lobby.getActions().contains(action.toUpperCase())){
//                    System.out.println("Tough luck little Grasshopper, you are not worthy of entering this room yet!");
//                }
//                else{
//                    System.out.println("HINT: JAVA!");
//                }
//            }



 void javascriptAction(Room room) {
        while (true) {
            //Player response after reading the status and action options
            String action = console.readLine("\nType action:");
            //Present player with the java quiz once they pick that action
            switch (action.toUpperCase()) {
                case "TAKE QUIZ":
                    for (String question : room.getQuiz().keySet()) {
                        String answer = console.readLine(question + ": ");
                        if (answer.equals(room.getQuiz().get(question))) {
                            System.out.println("Correct!!!");
                        } else {
                            System.out.println("Nope!!!");
                        }
                    }
                    room.getActions().remove("Take quiz");
                    if (room.getActions().size() == 0) {
                        room.getActions().add("ENTER ALGORITHM");
                        room.setActions(room.getActions());
                    }
                    System.out.println("\nACTIONS: " + room.getActions());
                    break;
                //Present player with wild card quiz if they pick that action
                case "TAKE WILD CARD QUIZ":
                    for (String question : room.getWildcard().keySet()) {
                        String answer = console.readLine(question + ": ");
                        if (answer.equals(room.getWildcard().get(question))) {
                            System.out.println("Correct!!!");
                        } else {
                            System.out.println("Nope!!!");
                        }
                    }
                    room.getActions().remove("Take wild card quiz");
                    if (room.getActions().size() == 0) {
                        room.getActions().add("ENTER ALGORITHM");
                        room.setActions(room.getActions());
                    }
                    System.out.println("\nACTIONS: " + room.getActions());
                    break;
                case "ENTER ALGORITHM":
                    return;
                default:
                    System.out.println("Invalid Entry!");
                    break;
            }
        }
    }

    void algorithmAction(Room room) {
        while (true) {
            //Player response after reading the status and action options
            String action = console.readLine("\nType action:");
            //Present player with the java quiz once they pick that action
            switch (action.toUpperCase()) {
                case "TAKE QUIZ":
                    for (String question : room.getQuiz().keySet()) {
                        String answer = console.readLine(question + ": ");
                        if (answer.equals(room.getQuiz().get(question))) {
                            System.out.println("Correct!!!");
                        } else {
                            System.out.println("Nope!!!");
                        }
                    }
                    room.getActions().remove("Take quiz");
                    if (room.getActions().size() == 0) {
                        room.getActions().add("ENTER LINUX");
                        room.setActions(room.getActions());
                    }
                    System.out.println("\nACTIONS: " + room.getActions());
                    break;
                //Present player with wild card quiz if they pick that action
                case "TAKE WILD CARD QUIZ":
                    for (String question : room.getWildcard().keySet()) {
                        String answer = console.readLine(question + ": ");
                        if (answer.equals(room.getWildcard().get(question))) {
                            System.out.println("Correct!!!");
                        } else {
                            System.out.println("Nope!!!");
                        }
                    }
                    room.getActions().remove("Take wild card quiz");
                    if (room.getActions().size() == 0) {
                        room.getActions().add("ENTER LINUX");
                        room.setActions(room.getActions());
                    }
                    System.out.println("\nACTIONS: " + room.getActions());
                    break;
                case "ENTER LINUX":
                    return;
                default:
                    System.out.println("Invalid Entry!");
                    break;
            }
        }
    }

    void linuxAction(Room room) {
        while (true) {
            //Player response after reading the status and action options
            String action = console.readLine("\nType action:");
            //Present player with the java quiz once they pick that action
            switch (action.toUpperCase()) {
                case "TAKE QUIZ":
                    for (String question : room.getQuiz().keySet()) {
                        String answer = console.readLine(question + ": ");
                        if (answer.equals(room.getQuiz().get(question))) {
                            System.out.println("Correct!!!");
                        } else {
                            System.out.println("Nope!!!");
                        }
                    }
                    room.getActions().remove("Take quiz");
                    if (room.getActions().size() == 0) {
                        room.getActions().add("ENTER PYTHON");
                        room.setActions(room.getActions());
                    }
                    System.out.println("\nACTIONS: " + room.getActions());
                    break;
                //Present player with wild card quiz if they pick that action
                case "TAKE WILD CARD QUIZ":
                    for (String question : room.getWildcard().keySet()) {
                        String answer = console.readLine(question + ": ");
                        if (answer.equals(room.getWildcard().get(question))) {
                            System.out.println("Correct!!!");
                        } else {
                            System.out.println("Nope!!!");
                        }
                    }
                    room.getActions().remove("Take wild card quiz");
                    if (room.getActions().size() == 0) {
                        room.getActions().add("ENTER PYTHON");
                        room.setActions(room.getActions());
                    }
                    System.out.println("\nACTIONS: " + room.getActions());
                    break;
                case "ENTER PYTHON":
                    return;
                default:
                    System.out.println("Invalid Entry!");
                    break;
            }
        }
    }



    BRAEAKOUT ROOM
    package com.game.room;

    import com.game.person.Instructor;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Map;

    public class RoomBreakout extends Room {
        //INSTANCE VARIABLE
        private String message = "--------------------------------------------" +
                "\nWELCOME TO THE BREAKOUT ROOM! " +
                "YOU HAVE WASTED YOUR OWN TIME, " +
                "BUT HERE IS A RED MARKER FOR YOUR ENTERTAINMENT!\n"+
                "NO ONE IS IN CHARGE, STUDY UP TO RETAKE THE TEST OR MOVE ON TO THE NEXT CLASS";

        private List<String> actions = new ArrayList(Arrays.asList(
    //            "WASTE TIME",
    //            "COMPLAIN",
                "RETAKE FAILED TEST(RE)",
                "PROCEED TO NEXT CLASS(P)"
        ));

        //CONSTRUCTOR
        public RoomBreakout() {
            super();
            setClassName(ClassName.BREAKOUT);
            setInstructor(new Instructor("NO BODY"));
        }

        //ACCESSOR METHODS
        @Override
        public String getMessage() {
            return message;
        }

        //BREAKOUT DOES NOT HAVE QUIZ FOR NOW
        @Override
        public Map<String, String> getQuiz() {
            return null;
        }
        //BREAKOUT DOES NOT HAVE WILD CARD FOR NOW
        @Override
        public Map<String, String> getWildcard() {
            return null;
        }

        @Override
        public List<String> getActions() {
            return actions;
        }

        @Override
        public void setActions(List<String> actions) {
            this.actions = actions;
        }

        @Override
        public String toString() {
            return "RoomBreakout{" +
                    "name=" + getClassName() + ", " +
                    getInstructor() + "\n" +
                    getMessage() + " } ";
        }
    }
